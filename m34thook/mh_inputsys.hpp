#pragma once
/*
	system that controls user io for our additions to the engine

*/

/*
  K_NONE = 0x0,
  K_ESCAPE = 0x1,
  K_1 = 0x2,
  K_2 = 0x3,
  K_3 = 0x4,
  K_4 = 0x5,
  K_5 = 0x6,
  K_6 = 0x7,
  K_7 = 0x8,
  K_8 = 0x9,
  K_9 = 0xA,
  K_0 = 0xB,
  K_MINUS = 0xC,
  K_EQUALS = 0xD,
  K_BACKSPACE = 0xE,
  K_TAB = 0xF,
  K_Q = 0x10,
  K_W = 0x11,
  K_E = 0x12,
  K_R = 0x13,
  K_T = 0x14,
  K_Y = 0x15,
  K_U = 0x16,
  K_I = 0x17,
  K_O = 0x18,
  K_P = 0x19,
  K_LBRACKET = 0x1A,
  K_RBRACKET = 0x1B,
  K_ENTER = 0x1C,
  K_LCTRL = 0x1D,
  K_A = 0x1E,
  K_S = 0x1F,
  K_D = 0x20,
  K_F = 0x21,
  K_G = 0x22,
  K_H = 0x23,
  K_J = 0x24,
  K_K = 0x25,
  K_L = 0x26,
  K_SEMICOLON = 0x27,
  K_APOSTROPHE = 0x28,
  K_GRAVE = 0x29,
  K_LSHIFT = 0x2A,
  K_BACKSLASH = 0x2B,
  K_Z = 0x2C,
  K_X = 0x2D,
  K_C = 0x2E,
  K_V = 0x2F,
  K_B = 0x30,
  K_N = 0x31,
  K_M = 0x32,
  K_COMMA = 0x33,
  K_PERIOD = 0x34,
  K_SLASH = 0x35,
  K_RSHIFT = 0x36,
  K_KP_STAR = 0x37,
  K_LALT = 0x38,
  K_SPACE = 0x39,
  K_CAPSLOCK = 0x3A,
  K_F1 = 0x3B,
  K_F2 = 0x3C,
  K_F3 = 0x3D,
  K_F4 = 0x3E,
  K_F5 = 0x3F,
  K_F6 = 0x40,
  K_F7 = 0x41,
  K_F8 = 0x42,
  K_F9 = 0x43,
  K_F10 = 0x44,
  K_PAUSE = 0x45,
  K_SCROLL = 0x46,
  K_KP_7 = 0x47,
  K_KP_8 = 0x48,
  K_KP_9 = 0x49,
  K_KP_MINUS = 0x4A,
  K_KP_4 = 0x4B,
  K_KP_5 = 0x4C,
  K_KP_6 = 0x4D,
  K_KP_PLUS = 0x4E,
  K_KP_1 = 0x4F,
  K_KP_2 = 0x50,
  K_KP_3 = 0x51,
  K_KP_0 = 0x52,
  K_KP_DOT = 0x53,
  K_F11 = 0x57,
  K_F12 = 0x58,
  K_F13 = 0x64,
  K_F14 = 0x65,
  K_F15 = 0x66,
  K_KANA = 0x70,
  K_CONVERT = 0x79,
  K_NOCONVERT = 0x7B,
  K_YEN = 0x7D,
  K_KP_EQUALS = 0x8D,
  K_CIRCUMFLEX = 0x90,
  K_AT = 0x91,
  K_COLON = 0x92,
  K_UNDERLINE = 0x93,
  K_KANJI = 0x94,
  K_STOP = 0x95,
  K_AX = 0x96,
  K_UNLABELED = 0x97,
  K_KP_ENTER = 0x9C,
  K_RCTRL = 0x9D,
  K_KP_COMMA = 0xB3,
  K_KP_SLASH = 0xB5,
  K_PRINTSCREEN = 0xB7,
  K_RALT = 0xB8,
  K_NUMLOCK = 0xC5,
  K_HOME = 0xC7,
  K_UPARROW = 0xC8,
  K_PGUP = 0xC9,
  K_LEFTARROW = 0xCB,
  K_RIGHTARROW = 0xCD,
  K_END = 0xCF,
  K_DOWNARROW = 0xD0,
  K_PGDN = 0xD1,
  K_INS = 0xD2,
  K_DEL = 0xD3,
  K_LWIN = 0xDB,
  K_RWIN = 0xDC,
  K_APPS = 0xDD,
  K_POWER = 0xDE,
  K_SLEEP = 0xDF,
  K_JOY1 = 0x100,
  K_JOY_A = 0x100,
  K_JOY2 = 0x101,
  K_JOY_B = 0x101,
  K_JOY3 = 0x102,
  K_JOY_X = 0x102,
  K_JOY4 = 0x103,
  K_JOY_Y = 0x103,
  K_JOY5 = 0x104,
  K_JOY_LB = 0x104,
  K_JOY6 = 0x105,
  K_JOY_RB = 0x105,
  K_JOY7 = 0x106,
  K_JOY_LS = 0x106,
  K_JOY8 = 0x107,
  K_JOY_RS = 0x107,
  K_JOY9 = 0x108,
  K_JOY_START = 0x108,
  K_JOY10 = 0x109,
  K_JOY_BACK = 0x109,
  K_JOY11 = 0x10A,
  K_JOY12 = 0x10B,
  K_JOY13 = 0x10C,
  K_JOY14 = 0x10D,
  K_JOY15 = 0x10E,
  K_JOY16 = 0x10F,
  K_JOY_STICK1_UP = 0x110,
  K_JOY_STICK1_DOWN = 0x111,
  K_JOY_STICK1_LEFT = 0x112,
  K_JOY_STICK1_RIGHT = 0x113,
  K_JOY_STICK2_UP = 0x114,
  K_JOY_STICK2_DOWN = 0x115,
  K_JOY_STICK2_LEFT = 0x116,
  K_JOY_STICK2_RIGHT = 0x117,
  K_JOY_TRIGGER1 = 0x118,
  K_JOY_TRIGGER2 = 0x119,
  K_JOY_DPAD_UP = 0x11A,
  K_JOY_DPAD_DOWN = 0x11B,
  K_JOY_DPAD_LEFT = 0x11C,
  K_JOY_DPAD_RIGHT = 0x11D,
  K_MOUSE1 = 0x11E,
  K_MOUSE2 = 0x11F,
  K_MOUSE3 = 0x120,
  K_MOUSE4 = 0x121,
  K_MOUSE5 = 0x122,
  K_MOUSE6 = 0x123,
  K_MOUSE7 = 0x124,
  K_MOUSE8 = 0x125,
  K_MWHEELDOWN = 0x126,
  K_MWHEELUP = 0x127,
  K_JOY_SIXAXIS_UP = 0x128,
  K_JOY_SIXAXIS_DOWN = 0x129,
  K_JOY_SIXAXIS_LEFT = 0x12A,
  K_JOY_SIXAXIS_RIGHT = 0x12B,
  K_VR_START_INDEX = 0x12C,
  K_STEAMVR_PRIMARY_START_INDEX = 0x12C,
  K_STEAMVR_PRIMARY_SYSTEM = 0x12C,
  K_STEAMVR_PRIMARY_APPLICATION = 0x12D,
  K_STEAMVR_PRIMARY_GRIP = 0x12E,
  K_STEAMVR_PRIMARY_DPAD_LEFT = 0x12F,
  K_STEAMVR_PRIMARY_DPAD_UP = 0x130,
  K_STEAMVR_PRIMARY_DPAD_RIGHT = 0x131,
  K_STEAMVR_PRIMARY_DPAD_DOWN = 0x132,
  K_STEAMVR_PRIMARY_A = 0x133,
  K_STEAMVR_PRIMARY_AXIS0 = 0x134,
  K_STEAMVR_PRIMARY_TOUCHPAD = 0x134,
  K_STEAMVR_PRIMARY_AXIS1 = 0x135,
  K_STEAMVR_PRIMARY_TRIGGER = 0x135,
  K_STEAMVR_PRIMARY_AXIS2 = 0x136,
  K_STEAMVR_PRIMARY_AXIS3 = 0x137,
  K_STEAMVR_PRIMARY_AXIS4 = 0x138,
  K_STEAMVR_SECONDARY_START_INDEX = 0x13C,
  K_STEAMVR_SECONDARY_SYSTEM = 0x13C,
  K_STEAMVR_SECONDARY_APPLICATION = 0x13D,
  K_STEAMVR_SECONDARY_GRIP = 0x13E,
  K_STEAMVR_SECONDARY_DPAD_LEFT = 0x13F,
  K_STEAMVR_SECONDARY_DPAD_UP = 0x140,
  K_STEAMVR_SECONDARY_DPAD_RIGHT = 0x141,
  K_STEAMVR_SECONDARY_DPAD_DOWN = 0x142,
  K_STEAMVR_SECONDARY_A = 0x143,
  K_STEAMVR_SECONDARY_AXIS0 = 0x144,
  K_STEAMVR_SECONDARY_TOUCHPAD = 0x144,
  K_STEAMVR_SECONDARY_AXIS1 = 0x145,
  K_STEAMVR_SECONDARY_TRIGGER = 0x145,
  K_STEAMVR_SECONDARY_AXIS2 = 0x146,
  K_STEAMVR_SECONDARY_AXIS3 = 0x147,
  K_STEAMVR_SECONDARY_AXIS4 = 0x148,
  K_PSMOVE_PRIMARY_START_INDEX = 0x14C,
  K_PSMOVE_PRIMARY_SELECT = 0x14C,
  K_PSMOVE_PRIMARY_START = 0x14E,
  K_PSMOVE_PRIMARY_TRIANGLE = 0x14F,
  K_PSMOVE_PRIMARY_SQUARE = 0x150,
  K_PSMOVE_PRIMARY_CIRCLE = 0x151,
  K_PSMOVE_PRIMARY_CROSS = 0x152,
  K_PSMOVE_PRIMARY_MOVE = 0x154,
  K_PSMOVE_PRIMARY_TRIGGER = 0x155,
  K_PSMOVE_SECONDARY_START_INDEX = 0x15C,
  K_PSMOVE_SECONDARY_SELECT = 0x15C,
  K_PSMOVE_SECONDARY_START = 0x15E,
  K_PSMOVE_SECONDARY_TRIANGLE = 0x15F,
  K_PSMOVE_SECONDARY_SQUARE = 0x160,
  K_PSMOVE_SECONDARY_CIRCLE = 0x161,
  K_PSMOVE_SECONDARY_CROSS = 0x162,
  K_PSMOVE_SECONDARY_MOVE = 0x164,
  K_PSMOVE_SECONDARY_TRIGGER = 0x165,
  K_PSAIM_START_INDEX = 0x16C,
  K_PSAIM_TRIANGLE = 0x16C,
  K_PSAIM_SQUARE = 0x16D,
  K_PSAIM_CIRCLE = 0x16E,
  K_PSAIM_CROSS = 0x16F,
  K_PSAIM_L1 = 0x170,
  K_PSAIM_L2 = 0x171,
  K_PSAIM_L3 = 0x172,
  K_PSAIM_R1 = 0x173,
  K_PSAIM_R2 = 0x174,
  K_PSAIM_R3 = 0x175,
  K_PSAIM_DPAD_LEFT = 0x176,
  K_PSAIM_DPAD_UP = 0x177,
  K_PSAIM_DPAD_RIGHT = 0x178,
  K_PSAIM_DPAD_DOWN = 0x179,
  K_PSAIM_TOUCHPAD = 0x17A,
  K_PSAIM_OPTIONS = 0x17B,
  K_VR_END_INDEX = 0x17C,
  K_LAST_KEY = 0x17C,
*/
//represents whether an event gets propagated after the input handler, or if it was fully handled and should not be passed on to the game
enum class event_consumed_e : unsigned {
	UNCONSUMED = 0,
	CONSUMED = 1
};
/*
	todo: have the searchnode directly in this struct instead of dynamically allocating it

	its probably best to use this to queue up the actual processing of these inputs rather than
	immediately handling them
*/
struct mh_input_handler_t {

	virtual event_consumed_e receive_char_event(unsigned gotchar) = 0;
	virtual event_consumed_e receive_keydown_event(const char* keyname) = 0;
	virtual event_consumed_e receive_keyup_event(const char* keyname) = 0;
	virtual void receive_mouse_move_event(unsigned x, unsigned y) = 0;
};

namespace mh_input {
	void install_input_hooks();
	/*
		never install a handler within a handlers callback, you will deadlock
	*/
	void install_input_handler(mh_input_handler_t* handler);
	void remove_input_handler(mh_input_handler_t* handler);
}